#!/usr/bin/env bash

##
# environment
##

wd="$(pwd)"
[[ -L "$0" ]] && script_path="$(readlink $0)" || script_path="$0"
cd "$(dirname $script_path)"
script_dir="$(pwd)"
cd "$wd"
service_dir="$script_dir/.pirr"
tmp_dir="$service_dir/tmp"
control_file="$tmp_dir/mplayercontrol"
volume_file="$tmp_dir/mplayervolume"

##
# utility functions
##

. $service_dir/functions

whisper "functions loaded"

##
# setup
##

default_volume=25
duck_volume=5
mkdir -p "$tmp_dir"
[[ -f $volume_file ]] || set_volume $default_volume

video_options=-novideo
broadcast=false

eq_boom=2:8:0:0:0:0:0:0:0:0

##
# operation
##

while getopts "sve:by:V:l:anpkqx:c:St:i" flag
do

	[[ -z $first_optind ]] && first_optind=$OPTIND

  case $flag in
    s ) shuffle=true;;
    v ) verbose=true;;
		e ) [[ $OPTARG =~ : ]] && eq="$OPTARG" || eq="$(eval "echo \$eq_$OPTARG")"; [[ -n $eq ]] && audio_filters="$audio_filters equalizer=$eq";;
		b ) broadcast=true;;
		y ) message="$OPTARG";;
    V ) voice="$OPTARG";;
		l ) list="$OPTARG";;
		a ) list_append=true;;
		n ) skip=1;;
		p ) skip=-1;;
		k ) kill=true;;
		q ) quiet=true;;

		x ) effect="$OPTARG";effect_optind=$OPTIND;;
		c ) command="$OPTARG";;

		S ) sticky=true;;
		t ) seek=$OPTARG;;

		i ) showinfo=true;;
  esac

done

whisper "starting pirate radio script"

shift $((OPTIND-1)); OPTIND=1

if [[ $kill = true ]]; then

	kill_daemons
	rm -rf $tmp_dir/*

fi

mplayer_options="$@"

if [[ -n $message || $broadcast = true ]]; then
	if [[ Darwin = $(uname) ]]; then
		audio_driver=coreaudio
		device_id=$(say -a ? | grep 'Soundflower (2ch)' | perl -pe 's/^\s+(\d+).*$/$1/')
		whisper "audio_driver: $audio_driver, device_id: $device_id"
	else
		audio_driver="help"
		broadcast=false
		message=
		shout "-b (broadcast) and -y (say) are currently only supported on Mac"
		sleep 1
	fi
fi

if [[ -n $list ]]; then

	if [[ ! $list =~ "^https?://" ]]; then # playlist on local filesystem

		if [[ ! $list =~ "^/" ]]; then # relative path
			list=${list/.m3u/}
			listpath=$script_dir/playlists/$list.m3u
			whisper "resolved $list to $listpath"
		fi

		if [[ ! -f $listpath ]]; then
			shout "Playlist '$listpath' doesn't exist. Exiting."
			clean_exit 1
		fi

	fi

	playlist_option="-playlist $listpath"

fi

if [[ -a "$control_file" ]]; then

	whisper "using existing broadcast"

	if [[ $showinfo = true ]]; then
		filename="$(lsof -p $(cat $tmp_dir/pid_mplayer) | grep '\<5r\>' | perl -pe 's/^[^\/]+//')"
		# FIXME: "5r" shows up in my `lsof` output, not sure why it's always the file
		echo -en "\n"
		shout "$(basename "$filename")"
		whisper "$filename"
		if [[ "$filename" =~ mp3$ ]]; then
			id3info "$filename"
		elif [[ "$filename" =~ m4a$ ]]; then
			mp4info "$filename"
		fi
		echo -en "\n"
	fi

	playlist_option= # unset playlist option: do not start up a new player

	if [[ -n $effect && $effect_optind -eq $first_optind ]]; then
		whisper "doing effect FIRST $effect"
		effect_$effect
	fi

	##
	# playback operations
	##

	if [[ -n $listpath ]]; then

		if [[ $shuffle = true ]]; then
			new_listpath="$tmp_dir/tmp_playlist.m3u"
			whisper "shuffling list into $new_listpath"
			cat "$listpath" | gshuf > "$new_listpath"
			listpath="$new_listpath"
		fi

		whisper "dynamically loading list $listpath"
		[[ $list_append = true ]] && append=1
		echo "loadlist '$listpath' $append"  >> "$control_file"

	elif [[ -n $skip ]]; then

		whisper "skipping: $skip"
		echo "pt_step $skip 1" >> "$control_file"

	elif [[ -n $command ]]; then

		whisper "sending to mplayer: $command"
		echo -e "$command" >> "$control_file"

	fi

	##
	# other audio input
	##

	if [[ -n $message ]]; then

		whisper "preparing to speak message"
		[[ -n $voice ]] && voice_options="-v $voice"

		if [[ ? = $voice ]]; then
			whisper "listing voices"
			say $voice_options
		else
			current_volume=$(get_volume)
			shout "Ducking audio and speaking message \"$message\"."
			effect_fade $duck_volume
			say -a $device_id $voice_options "$message"
			effect_fade $current_volume
		fi

	fi

	if [[ -n $effect && $effect_optind -gt $first_optind ]]; then
		whisper "doing effect LAST $effect"
		effect_$effect
	fi

elif [[ $broadcast = true ]]; then # new brodcast

	whisper "new broadcast"
	audio_options="$audio_options -ao $audio_driver"

	if [[ -n $device_id ]]; then
		whisper "broadcast to audio device $device_id"
		audio_options="$audio_options:device_id=$device_id"
	fi

	whisper "starting daemons for broadcast"
	start_daemon jackd -d coreaudio
	sleep 1
	start_daemon icecast -c "$service_dir/icecast.xml"
	sleep 1
	start_daemon darkice -v 10 -c "$service_dir/darkice.cfg"

	if [[ 0 != $(get_daemon_status darkice) ]]; then
		shout "Make sure that soundflower is running, and is set to be default input and output. Once your broadcast is started, you may want to set your default audio input and output back to the built-in."
		clean_exit 1
	fi

	sleep 1

fi

if [[ $shuffle = true ]]; then
	shuffle_option="-shuffle"
fi

if [[ -n $audio_filters ]]; then
	audio_options="$audio_options -af $audio_filters"
fi

if [[ -n $playlist_option || -n $mplayer_options ]]; then

	if [[ $broadcast = true ]]; then
		mkfifo "$control_file"

		input_options="-slave -quiet -input file=\"$control_file\""

		whisper "starting mplayer as a daemon"
		mplayer_output="$tmp_dir/mplayer_output"
		mkfifo "$mplayer_output"
		start_daemon -o $mplayer_output mplayer $input_options $video_options $audio_options $shuffle_option -loop 0 $playlist_option $mplayer_options
	else
		$mplayer_output mplayer $input_options $video_options $audio_options $shuffle_option -loop 0 $playlist_option $mplayer_options
	fi

fi
whisper "ending pirate radio script"
