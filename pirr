#!/usr/bin/env bash

##
# environment
##

wd="$(pwd)"
[[ -L "$0" ]] && script_path="$(readlink $0)" || script_path="$0"
cd "$(dirname "$script_path")"
script_dir="$(pwd)"
cd "$wd"

service_dir="$wd/.pirr"
if [[ ! -d "$service_dir" ]]; then
	service_dir="$script_dir/.pirr"
fi

tmp_dir="$service_dir/tmp"
control_file="$tmp_dir/mplayercontrol"
volume_file="$tmp_dir/mplayervolume"

##
# utility functions
##

function shout() {
	[[ $quiet != true ]] && echo $@ >> /dev/stderr
}
function whisper() {
	[[ $verbose = true ]] && echo $@ >> /dev/stderr
}

function integer_tween() {
	local command from to value i
	command=$1
	from=$2
	to=$3
	for i in {1..10}; do
		value=$((($to-$from)*$i/10+$from))
		eval "${command/\%\%/$value}"
		gsleep 0.1
	done
	eval "${command/\%\%/$to}"
}

function set_volume() {
	[[ -a "$control_file" ]] && echo "volume $1 1" >> "$control_file"
	echo $1 > $volume_file
}

function get_volume() {
	cat $volume_file
}

function effect_fade() {
	whisper "effect_fade $@"
	volume_before_fade=$(get_volume)
	integer_tween "set_volume %%" volume_before_fade $1
}

function effect_fadeout() {
	whisper "effect_fadeout $@"
	effect_fade 0
}

function effect_fadein() {
	whisper "effect_fadein $@"
	local target_volume

	[[ -n $volume_before_fade ]] && target_volume=$volume_before_fade || target_volume=$default_volume
	effect_fade $target_volume
}

function toggle_sticky() {
	sticky_file="$tmp_dir/.sticky"
	[[ -f $sticky_file ]] && rm $sticky_file || touch $sticky_file
}

start_daemon() {
	local name options status pid_file output

	if [[ $1 = '-o' ]]; then
		output_file="$2"
		shift 2
	fi

	name=$1
	shift 1
	options=("$@")
	whisper "starting daemon: $name, ${#options} options"

	pid_file="$tmp_dir/pid_$name"
	# output="$tmp_dir/fifo_$name"
	# mkfifo "$output"
	output="/dev/null"

	$name ${options[@]} &> /dev/null &

	eval "status_$name=($! $?)"
	eval "echo \${status_$name[0]} > \"$pid_file\""
}

get_daemon_status() {
	local name
	name=$1
	status=$(eval "echo \${status_$name[1]}")
	echo $status
}

kill_daemon() {
	local name pid_file pid
	name=$1
	pid_file="$tmp_dir/pid_$name"
	if [[ -f $pid_file ]]; then
		pid=$(cat "$pid_file")
		whisper "killing daemon $name, (PID $pid)"
		kill -HUP $pid
		rm "$pid_file"
	else
		whisper "no known process $name"
	fi
}

function kill_daemons() {
	local process_notes basename name

	process_notes=$(ls -1 "$tmp_dir/pid_"*)
	if [[ -z $process_notes ]]; then
		whisper "no daemons to kill"
	else
		whisper "killing daemons"
		for note in $process_notes; do
			basename="$(basename "$note")"
			name="${basename/pid_/}"
			kill_daemon $name
		done
	fi

	[[ -a "$control_file" ]] && rm -rf "$control_file"
	[[ -f "$volume_file" ]] && rm -rf "$volume_file"
}

function clean_exit() {
	local status message

	[[ -z $1 ]] && status=0 || status=$1

	if [[ $broadcast = true ]]; then

		if [[ $status = 0 && $sticky = true ]]; then
			echo "sticky: keeping radio station running"
		else
			kill_daemons
		fi

	fi

	[[ -n $2 ]] && message=": $message"
	echo "exiting pirr$message"

	exit $status
}

function get_queue_length() {
	local name length
	name=$1
	length=$(eval "echo \${#queue_$name[@]}")
	echo $length
}

function advance_queue() {
	local name message
	name=$1
	shift 1
	message="$@"

	action="$(pop_queue $name)"

	function_with_args="${name}_${action}"
	function=${function_with_args/ */}
	if [[ $(type -t $function) = function ]]; then
		if [[ -n $message ]]; then
			whisper "${message/\{\}/$value}"
		fi
		$function_with_args
	else
		whisper "no function: $function_with_args"
	fi
}

function enqueue_method() {
	local name action
	name=$1
	shift 1
	action="$@"
	if [[ $(get_queue_length $name) -le 0 ]]; then # queue doesn't exist
		eval "queue_${name}=()"
	fi
	eval "queue_${name}+=(\"$action\")"
	whisper "enqueue $name '$@' ($(get_queue_length $name) in queue)"
}

function pop_queue() {
	local name value
	name="$1"

	if [[ $(get_queue_length $name) -gt 0 ]]; then

		# store the first item
		value="$(eval "echo \${queue_$name[0]}")"

		# remove the first item from the list
		eval "queue_${name}=(\"\${queue_${name}[@]:1}\")"

		echo "$value"
	fi
}

function purge_queue() {
	local name message
	name=$1
	shift 1
	messsage="$@"
	while [[ $(get_queue_length $name) -gt 0 ]]; do
		advance_queue $name "$messsage"
	done
}

##
# setup
##

default_volume=25
duck_volume=5
mkdir -p "$tmp_dir"
[[ -f $volume_file ]] || set_volume $default_volume

video_options=-novideo
broadcast=false

eq_boom=2:8:0:0:0:0:0:0:0:0

##
# operation
##

# effect=()
# effect_optind=()

while getopts "sve:by:V:l:anpkqx:c:St:i" flag
do

	[[ -z $first_optind ]] && first_optind=$OPTIND

  case $flag in
    s ) shuffle=true;;
    v ) verbose=true;;
		e ) [[ $OPTARG =~ : ]] && eq="$OPTARG" || eq="$(eval "echo \$eq_$OPTARG")"; [[ -n $eq ]] && audio_filters="$audio_filters equalizer=$eq";;
		b ) broadcast=true;;
		y ) message="$OPTARG";;
    V ) voice="$OPTARG";;
		l ) list="$OPTARG";;
		a ) list_append=true;;
		n ) skip=1;;
		p ) skip=-1;;
		k ) kill=true;;
		q ) quiet=true;;

		x ) enqueue_method effect "$OPTARG";;

		c ) command="$OPTARG";;

		S ) sticky=true;;
		t ) seek=$OPTARG;;

		i ) showinfo=true;;
  esac

done

whisper "starting pirate radio script"

shift $((OPTIND-1)); OPTIND=1

if [[ $kill = true ]]; then

	kill_daemons
	rm -rf $tmp_dir/*

fi

mplayer_options="$@"

if [[ -n $message || $broadcast = true ]]; then
	if [[ Darwin = $(uname) ]]; then
		audio_driver=coreaudio
		device_id=$(say -a ? | grep 'Soundflower (2ch)' | perl -pe 's/^\s+(\d+).*$/$1/')
		whisper "audio_driver: $audio_driver, device_id: $device_id"
	else
		audio_driver="help"
		broadcast=false
		message=
		shout "-b (broadcast) and -y (say) are currently only supported on Mac"
		sleep 1
	fi
fi

if [[ -n $list ]]; then

	if [[ ! $list =~ "^https?://" ]]; then # playlist on local filesystem

		if [[ ! $list =~ "^/" ]]; then # relative path
			list=${list/.m3u/}
			listpath=$script_dir/playlists/$list.m3u
			whisper "resolved $list to $listpath"
		fi

		if [[ ! -f $listpath ]]; then
			shout "Playlist '$listpath' doesn't exist. Exiting."
			clean_exit 1
		fi

	fi

	playlist_option="-playlist $listpath"

fi

if [[ -a "$control_file" ]]; then

	whisper "using existing broadcast"

	if [[ $showinfo = true ]]; then
		filename="$(lsof -p $(cat $tmp_dir/pid_mplayer) | grep '\<5r\>' | perl -pe 's/^[^\/]+//')"
		# FIXME: "5r" shows up in my `lsof` output, not sure why it's always the file
		echo -en "\n"
		shout "$(basename "$filename")"
		whisper "$filename"
		if [[ "$filename" =~ mp3$ ]]; then
			id3info "$filename"
		elif [[ "$filename" =~ m4a$ ]]; then
			mp4info "$filename"
		fi
		echo -en "\n"
	fi

	playlist_option= # unset playlist option: do not start up a new player

	advance_queue effect "FIRST effect {}"

	##
	# playback operations
	##

	if [[ -n $listpath ]]; then

		if [[ $shuffle = true ]]; then
			new_listpath="$tmp_dir/tmp_playlist.m3u"
			whisper "shuffling list into $new_listpath"
			cat "$listpath" | gshuf > "$new_listpath"
			listpath="$new_listpath"
		fi

		whisper "dynamically loading list $listpath"
		[[ $list_append = true ]] && append=1
		echo "loadlist '$listpath' $append"  >> "$control_file"

	elif [[ -n $skip ]]; then

		whisper "skipping: $skip"
		echo "pt_step $skip 1" >> "$control_file"

	elif [[ -n $command ]]; then

		whisper "sending to mplayer: $command"
		echo -e "$command" >> "$control_file"

	fi

	##
	# other audio input
	##

	if [[ -n $message ]]; then

		whisper "preparing to speak message"
		[[ -n $voice ]] && voice_options="-v $voice"

		if [[ ? = $voice ]]; then
			whisper "listing voices"
			say $voice_options
		else
			current_volume=$(get_volume)
			shout "speaking message \"$message\"."
			say -a $device_id $voice_options "$message"
		fi

	fi

	purge_queue effect "REMAINING effect {}"

elif [[ $broadcast = true ]]; then # new brodcast

	whisper "new broadcast"
	audio_options="$audio_options -ao $audio_driver"

	if [[ -n $device_id ]]; then
		whisper "broadcast to audio device $device_id"
		audio_options="$audio_options:device_id=$device_id"
	fi

	whisper "starting daemons for broadcast"
	start_daemon jackd -d coreaudio
	sleep 1
	start_daemon icecast -c "$service_dir/icecast.xml"
	sleep 1
	start_daemon darkice -v 10 -c "$service_dir/darkice.cfg"

	if [[ 0 != $(get_daemon_status darkice) ]]; then
		shout "Make sure that soundflower is running, and is set to be default input and output. Once your broadcast is started, you may want to set your default audio input and output back to the built-in."
		clean_exit 1
	fi

	sleep 1

fi

if [[ $shuffle = true ]]; then
	shuffle_option="-shuffle"
fi

if [[ -n $audio_filters ]]; then
	audio_options="$audio_options -af $audio_filters"
fi

if [[ -n $playlist_option || -n $mplayer_options ]]; then

	if [[ $broadcast = true ]]; then
		mkfifo "$control_file"

		input_options="-slave -quiet -input file=\"$control_file\""

		whisper "starting mplayer as a daemon"
		mplayer_output="$tmp_dir/mplayer_output"
		mkfifo "$mplayer_output"
		start_daemon -o $mplayer_output mplayer $input_options $video_options $audio_options $shuffle_option -loop 0 $playlist_option $mplayer_options
	else
		$mplayer_output mplayer $input_options $video_options $audio_options $shuffle_option -loop 0 $playlist_option $mplayer_options
	fi

fi
whisper "ending pirate radio script"
