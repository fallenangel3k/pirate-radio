#!/usr/bin/env bash

wd="$(pwd)"
cd "$(dirname $0)"
script_dir="$(pwd)"
service_dir="$script_dir/.service"
control_file="$service_dir/mplayercontrol"
default_volume=25
duck_volume=5
cd $wd

function integer_tween() {
	command=$1
	from=$2
	to=$3
	for i in {1..10}; do
		value=$((($to-$from)*$i/10+$from))
		eval "${command/\%\%/$value}"
		gsleep 0.1
	done
	eval "${command/\%\%/$to}"
}

function fade_out() {
	integer_tween "echo 'volume %% 1' >> \"$control_file\"" $default_volume 0
}

function clean_exit() {
	echo "exiting cleanly, killing daemons"

	if [[ $broadcast = true ]]; then

		sudo killall jackd icecast darkice

		# if [[ -n ${jackd_status[0]} ]]; then
		# 	kill -HUP ${jackd_status[0]}
		# fi

		# if [[ -n ${icecast_status[0]} ]]; then
		# 	kill -HUP ${icecast_status[0]}
		# fi

		# if [[ -n ${darkice_status[0]} ]]; then
		# 	kill -HUP ${darkice_status[0]}
		# fi

		rm -rf "$control_file"

	fi

	[[ -z $1 ]] && status=0 || status=$1

	exit $status
}

shuffle=
video_options=-novideo
audio_filters=
broadcast=false

eq_boom=2:8:0:0:0:0:0:0:0:0

while getopts "sve:by:V:ql:c:np" flag
do
  case $flag in
    s ) shuffle=-shuffle;;
    v ) video_options=;;
		e ) [[ $OPTARG =~ : ]] && eq="$OPTARG" || eq="$(eval "echo \$eq_$OPTARG")"; [[ -n $eq ]] && audio_filters="$audio_filters equalizer=$eq";;
		b ) broadcast=true;;
		y ) message="$OPTARG";;
    V ) voice="$OPTARG";;
		l ) list="$OPTARG";;
		n ) skip=1;echo "Skipping foward";;
		p ) skip=-1;echo "Skipping backward";;
		q ) kill=true;;
		c ) command="$OPTARG";;
  esac
done
shift $((OPTIND-1)); OPTIND=1

mplayer_options="$@"

if [[ -n $message || $broadcast = true ]]; then
	if [[ Darwin = $(uname) ]]; then
		audio_driver=coreaudio
		device_id=$(say -a ? | grep 'Soundflower (2ch)' | perl -pe 's/^\s+(\d+).*$/$1/')
	else
		audio_driver="help"
		broadcast=false
		message=
		echo "-b (broadcast) and -y (say) are currently only supported on Mac"
		sleep 1
	fi
fi

if [[ -n $list || -n $mplayer_options ]]; then

	if [[ -n $audio_filters ]]; then
		audio_options="$audio_options -af $audio_filters"
	fi

	if [[ -n $list ]]; then

		if [[ ! $list =~ "^https?://" ]]; then # playlist on local filesystem

			if [[ ! $list =~ "^/" ]]; then # relative path
				list=${list/.m3u/}
				listpath=$script_dir/playlists/$list.m3u
			fi

			if [[ ! -f $listpath ]]; then
				echo "Playlist '$listpath' doesn't exist. Exiting."
				exit 1
			fi

		fi

		playlist_option="-playlist $listpath"

	fi

	if [[ $broadcast = true ]]; then

		audio_options="$audio_options -ao $audio_driver"

		if [[ -n $device_id ]]; then
			audio_options="$audio_options:device_id=$device_id"
		fi

		echo "starting jackd"
		jackd -d coreaudio &> /dev/null &
		jackd_status=($!,$?)
		sleep 1

		echo "starting icecast"
		icecast -c "$service_dir/icecast.xml" &> /dev/null &
		icecast_status=($! $?)
		sleep 1

		echo "starting darkice"
		darkice -v 10 -c "$service_dir/darkice.cfg" &> /dev/null &
		darkice_status=($! $?)
		if [[ 0 != ${darkice_status[1]} ]]; then
			echo "Make sure soundflower is running, and is set to be default input and output. Once the radio is being broadcast, you can set your system default input and output back to the built-in."
			clean_exit 1
		fi

		sleep 1

		rm -rf "$control_file"
		mkfifo "$control_file"

		input_options="-slave -input file=\"$control_file\""

	fi

	mplayer $input_options $video_options $audio_options $shuffle -loop 0 $playlist_option $mplayer_options

	if [[ $broadcast = true ]]; then
		clean_exit 0
	fi

else

	if [[ -n $skip ]]; then

		fade_out
		echo 'pt_step $skip 1' >> "$control_file"

	elif [[ $kill = true ]]; then

		fade_out
		echo 'quit' >> "$control_file"

	elif [[ -n $message ]]; then

		[[ -n $voice ]] && voice_options="-v $voice"

		if [[ ? = $voice ]]; then
			say $voice_options
		else

			echo "Ducking audio and speaking message \"$message\"."
			integer_tween "echo 'volume %% 1' >> $control_file" $default_volume $duck_volume
			say -a $device_id $voice_options "$message"
			integer_tween "echo 'volume %% 1' >> $control_file" $duck_volume $default_volume

		fi

	elif [[ -n $command ]]; then

		echo -e "$command" >> "$control_file"

	fi

fi
